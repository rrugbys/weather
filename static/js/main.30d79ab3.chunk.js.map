{"version":3,"sources":["component/__generated__/CountryListQuery.graphql.js","component/__generated__/CountryPageQuery.graphql.js","component/__generated__/WeatherPageQuery.graphql.js","createRelayEnvironment.js","component/CountryList.js","component/CountryPage.js","createRelayEnvironmentWeather.js","component/WeatherPage.js","App.js","reportWebVitals.js","index.js"],"names":["node","v0","hash","module","exports","v1","v2","network","Network","create","operation","variables","fetch","method","headers","body","JSON","stringify","query","text","then","response","json","source","RecordSource","store","Store","Environment","CountryListQuery","CountryList","environment","render","error","relayProps","props","className","countries","map","item","to","code","name","CountryPageQuery","CountryPage","URLSearchParams","useLocation","search","history","useHistory","console","log","get","Fragment","onClick","goBack","country","capital","states","AnyReactComponent","WeatherPageQuery","WeatherPage","stateName","temp","getCityByName","weather","temperature","wind","summary","coords","coord","coordinates","lat","lon","maps","icons","icon","alt","title","src","bootstrapURLKeys","key","defaultCenter","defaultZoom","lng","Math","round","feelsLike","description","min","max","actual","speed","deg","StyledParent","styled","div","App","basename","process","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30d79ab3.chunk.js","sourcesContent":["/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type CountryListQueryVariables = {||};\nexport type CountryListQueryResponse = {|\n  +countries: $ReadOnlyArray<{|\n    +name: string,\n    +code: string,\n    +capital: ?string,\n  |}>\n|};\nexport type CountryListQuery = {|\n  variables: CountryListQueryVariables,\n  response: CountryListQueryResponse,\n|};\n*/\n\n\n/*\nquery CountryListQuery {\n  countries {\n    name\n    code\n    capital\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"alias\": null,\n    \"args\": null,\n    \"concreteType\": \"Country\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"countries\",\n    \"plural\": true,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"code\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"capital\",\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"CountryListQuery\",\n    \"selections\": (v0/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": [],\n    \"kind\": \"Operation\",\n    \"name\": \"CountryListQuery\",\n    \"selections\": (v0/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"2a5d44e45ecdaa3586bb5c7cc27cd15f\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"CountryListQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query CountryListQuery {\\n  countries {\\n    name\\n    code\\n    capital\\n  }\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = '7ae849cc841fc596ae1098d684c007a4';\n\nmodule.exports = node;\n","/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type CountryPageQueryVariables = {|\n  code: string\n|};\nexport type CountryPageQueryResponse = {|\n  +country: ?{|\n    +name: string,\n    +code: string,\n    +capital: ?string,\n    +states: $ReadOnlyArray<{|\n      +name: string\n    |}>,\n  |}\n|};\nexport type CountryPageQuery = {|\n  variables: CountryPageQueryVariables,\n  response: CountryPageQueryResponse,\n|};\n*/\n\n\n/*\nquery CountryPageQuery(\n  $code: ID!\n) {\n  country(code: $code) {\n    name\n    code\n    capital\n    states {\n      name\n    }\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"code\"\n  }\n],\nv1 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv2 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"code\",\n        \"variableName\": \"code\"\n      }\n    ],\n    \"concreteType\": \"Country\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"country\",\n    \"plural\": false,\n    \"selections\": [\n      (v1/*: any*/),\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"code\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"capital\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"State\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"states\",\n        \"plural\": true,\n        \"selections\": [\n          (v1/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"CountryPageQuery\",\n    \"selections\": (v2/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"CountryPageQuery\",\n    \"selections\": (v2/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"88f74f4f462c3849085171e13fa95bfe\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"CountryPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query CountryPageQuery(\\n  $code: ID!\\n) {\\n  country(code: $code) {\\n    name\\n    code\\n    capital\\n    states {\\n      name\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = 'bc636b98a64e2d619f05e93edceb7645';\n\nmodule.exports = node;\n","/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\nexport type WeatherPageQueryVariables = {|\n  name: string\n|};\nexport type WeatherPageQueryResponse = {|\n  +getCityByName: ?{|\n    +id: ?string,\n    +name: ?string,\n    +country: ?string,\n    +coord: ?{|\n      +lon: ?number,\n      +lat: ?number,\n    |},\n    +weather: ?{|\n      +summary: ?{|\n        +icon: ?string,\n        +description: ?string,\n        +title: ?string,\n      |},\n      +temperature: ?{|\n        +min: ?number,\n        +max: ?number,\n        +actual: ?number,\n        +feelsLike: ?number,\n      |},\n      +wind: ?{|\n        +speed: ?number,\n        +deg: ?number,\n      |},\n      +clouds: ?{|\n        +all: ?number,\n        +visibility: ?number,\n        +humidity: ?number,\n      |},\n      +timestamp: ?number,\n    |},\n  |}\n|};\nexport type WeatherPageQuery = {|\n  variables: WeatherPageQueryVariables,\n  response: WeatherPageQueryResponse,\n|};\n*/\n\n\n/*\nquery WeatherPageQuery(\n  $name: String!\n) {\n  getCityByName(name: $name) {\n    id\n    name\n    country\n    coord {\n      lon\n      lat\n    }\n    weather {\n      summary {\n        icon\n        description\n        title\n      }\n      temperature {\n        min\n        max\n        actual\n        feelsLike\n      }\n      wind {\n        speed\n        deg\n      }\n      clouds {\n        all\n        visibility\n        humidity\n      }\n      timestamp\n    }\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"name\"\n  }\n],\nv1 = [\n  {\n    \"alias\": null,\n    \"args\": [\n      {\n        \"kind\": \"Variable\",\n        \"name\": \"name\",\n        \"variableName\": \"name\"\n      }\n    ],\n    \"concreteType\": \"City\",\n    \"kind\": \"LinkedField\",\n    \"name\": \"getCityByName\",\n    \"plural\": false,\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"id\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"name\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"kind\": \"ScalarField\",\n        \"name\": \"country\",\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"Coordinates\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"coord\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"lon\",\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"lat\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      },\n      {\n        \"alias\": null,\n        \"args\": null,\n        \"concreteType\": \"Weather\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"weather\",\n        \"plural\": false,\n        \"selections\": [\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Summary\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"summary\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"icon\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"description\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"title\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Temperature\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"temperature\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"min\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"max\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"actual\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"feelsLike\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Wind\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"wind\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"speed\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"deg\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"concreteType\": \"Clouds\",\n            \"kind\": \"LinkedField\",\n            \"name\": \"clouds\",\n            \"plural\": false,\n            \"selections\": [\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"all\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"visibility\",\n                \"storageKey\": null\n              },\n              {\n                \"alias\": null,\n                \"args\": null,\n                \"kind\": \"ScalarField\",\n                \"name\": \"humidity\",\n                \"storageKey\": null\n              }\n            ],\n            \"storageKey\": null\n          },\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"timestamp\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"storageKey\": null\n  }\n];\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"WeatherPageQuery\",\n    \"selections\": (v1/*: any*/),\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"WeatherPageQuery\",\n    \"selections\": (v1/*: any*/)\n  },\n  \"params\": {\n    \"cacheID\": \"95eb2b73453cde61894e6f1d5510beff\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"WeatherPageQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query WeatherPageQuery(\\n  $name: String!\\n) {\\n  getCityByName(name: $name) {\\n    id\\n    name\\n    country\\n    coord {\\n      lon\\n      lat\\n    }\\n    weather {\\n      summary {\\n        icon\\n        description\\n        title\\n      }\\n      temperature {\\n        min\\n        max\\n        actual\\n        feelsLike\\n      }\\n      wind {\\n        speed\\n        deg\\n      }\\n      clouds {\\n        all\\n        visibility\\n        humidity\\n      }\\n      timestamp\\n    }\\n  }\\n}\\n\"\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = '760a014fe190034101999676eafa0278';\n\nmodule.exports = node;\n","import { Environment, Store, RecordSource, Network} from 'relay-runtime'\n\nfunction fetchQuery(operation, variables) {\n    return fetch('https://countries.trevorblades.com/', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            query: operation.text,\n            variables\n        })\n    }).then(response => {\n        return response.json()\n    })\n\n}\n\nconst network = Network.create(fetchQuery)\nconst source = new RecordSource()\nconst store = new Store(source)\n\nexport default new Environment({\n    network, store\n})","import environment from './../createRelayEnvironment';\nimport {QueryRenderer, graphql} from 'react-relay';\nimport { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst CountryListQuery = graphql`\nquery CountryListQuery {\n    countries {\n        name\n        code\n        capital\n    }\n}\n`\n\nfunction CountryList() {\n    return(\n        <QueryRenderer\n            environment={environment}\n            query={CountryListQuery}\n            render={RenderApp}\n        />\n    )\n\n    function RenderApp({error, props: relayProps}) {\n        if(error) {\n            return <div>Error in loading data</div>\n        } else if(relayProps) {\n            return (\n                <Fragment>\n                    <div className=\"header\">\n                        <div className=\"country\">\n                            Country List\n                        </div>\n                    </div>\n                    <ul>\n                        {\n                            relayProps.countries.map(item => \n                                <li key={item.name} >\n                                    <Link to={`/country?code=${item.code}`}>{item.name} ({item.code})</Link>\n                                </li>\n                            )\n                        }\n                    </ul>\n                </Fragment>\n            )\n        } else {\n            return <div>Loading...</div>\n        }\n    }\n}\n\nexport default CountryList","\nimport environment from './../createRelayEnvironment';\nimport {QueryRenderer, graphql} from 'react-relay';\nimport React from 'react';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\nconst CountryPageQuery = graphql`\nquery CountryPageQuery($code: ID!) {\n    country(code: $code) {\n        name\n        code\n        capital\n        states {\n            name\n        }\n    }\n}\n`\n\nfunction useQuery() {\n    return new URLSearchParams(useLocation().search);\n}\n\nfunction CountryPage(props) {\n    let query = useQuery();\n    const history = useHistory();\n    console.log(query.get(\"code\"));\n    return(\n        <QueryRenderer\n            environment={environment}\n            query={CountryPageQuery}\n            render={RenderApp}\n            variables={{ code: query.get(\"code\") }}\n        />\n    )\n\n    function RenderApp({error, props: relayProps}) {\n        if(error) {\n            return <div>Error in loading data</div>\n        } else if(relayProps) {\n            return (\n            <React.Fragment>\n                <div className=\"header\">\n                    <div className=\"back-btn\" onClick={() => history.goBack()}>Back</div>\n                    <div className=\"country\">\n                        <div className=\"back-btn-mobile\" onClick={() => history.goBack()}>◀</div>\n                        {relayProps.country.name} ({relayProps.country.code})\n                    </div>\n                    <div className=\"country-capital\">Capital : {relayProps.country.capital}</div>\n                </div>\n                <ul>\n                    {\n                        relayProps.country.states.map(item => \n                            <li key={item.name} >\n                                <Link to={`/weather?stateName=${item.name}`}>{item.name}</Link>\n                            </li>\n                            )\n                    }\n                </ul>\n            </React.Fragment>\n            )\n        } else {\n            return <div>Loading...</div>\n        }\n    }\n}\n\nexport default CountryPage","import { Environment, Store, RecordSource, Network} from 'relay-runtime'\n\nfunction fetchQuery(operation, variables) {\n    return fetch('https://graphql-weather-api.herokuapp.com/', {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            query: operation.text,\n            variables\n        })\n    }).then(response => {\n        return response.json()\n    })\n\n}\n\nconst network = Network.create(fetchQuery)\nconst source = new RecordSource()\nconst store = new Store(source)\n\nexport default new Environment({\n    network, store\n})","import environment from './../createRelayEnvironmentWeather'\nimport {QueryRenderer, graphql } from 'react-relay';\nimport React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { useLocation, useHistory } from 'react-router-dom';\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nconst WeatherPageQuery = graphql`\nquery WeatherPageQuery($name: String!) {\n    getCityByName(name: $name) {\n        id\n        name\n        country\n        coord {\n\t\t\tlon\n            lat\n        }\n        weather{ \n            summary{\n                icon\n                description\n                title\n            }\n            temperature {\n                min\n                max\n                actual\n                feelsLike\n            }\n            wind{\n                speed\n                deg\n            }\n            clouds {\n                all\n                visibility\n                humidity\n            }\n            timestamp\n        }\n    }\n}\n`\nfunction useQuery() {\n    return new URLSearchParams(useLocation().search);\n}\n\nfunction WeatherPage() {\n    let query = useQuery();\n    const history = useHistory()\n    const stateName = query.get(\"stateName\");\n    console.log(stateName)\n    return(\n        <QueryRenderer\n            environment={environment}\n            query={WeatherPageQuery}\n            render={RenderApp}\n            variables={ {name: stateName} }\n        />\n    )\n\n    \n\n    function RenderApp({error, props: relayProps}) {\n        const temp = relayProps?.getCityByName?.weather?.temperature\n        const wind = relayProps?.getCityByName?.weather?.wind\n        const summary = relayProps?.getCityByName?.weather?.summary\n        const coords = relayProps?.getCityByName?.coord\n        const coordinates = {\n            'lat': coords?.lat,\n            'lng': coords?.lon\n        }\n        let maps = null\n        let icons = null\n        if(summary && summary.icon) {\n            icons = (<img alt={summary?.title} src={`http://openweathermap.org/img/w/${summary?.icon}.png`} />);\n        }\n        if(coords && coords?.lat) {\n            maps = (<GoogleMapReact\n                bootstrapURLKeys={{ key: \"AIzaSyBj5hz0EOV8iJuXFFkLl2qXW85TA-gBuqk\" }}\n                defaultCenter={coordinates}\n                defaultZoom={11}\n                >\n                <AnyReactComponent\n                    lat={coords?.lat}\n                    lng={coords?.lon}\n\n                />\n                </GoogleMapReact>\n            )\n        }\n        if(error) {\n            return <div>Error in loading data</div>\n        } else if(relayProps) {\n            return (\n                <React.Fragment>\n                    <div className=\"header\">\n                        <div className=\"back-btn\" onClick={() => history.goBack()}>Back</div>\n                        <div className=\"country\">\n                            <div className=\"back-btn-mobile\" onClick={() => history.goBack()}>◀</div>\n                            {relayProps?.getCityByName?.name} ({relayProps?.getCityByName?.country}) \n                        </div>\n                    </div>\n                    <div className=\"weather-page\">\n                        <div className=\"card temp-card\">\n                            <div className=\"actual-temp\">\n                                <label>Current Weather</label>\n                                <div className=\"value\">\n                                    {icons}\n                                    <span>{Math.round(temp?.feelsLike-273.15)}°<span>c</span></span>\n                                </div>\n                                <label>{summary?.description}</label>\n                            </div>                            \n                            <div className=\"line-wrapper\">\n                                <div className=\"line\">\n                                    <span className=\"label\">Min</span>\n                                    <span className=\"value\">{Math.round(temp?.min-273.15)}</span>\n                                </div>\n                                <div className=\"line\">\n                                    <span className=\"label\">Max</span>\n                                    <span className=\"value\">{Math.round(temp?.max-273.15)}</span>\n                                </div>\n                                <div className=\"line\">\n                                    <span className=\"label\">Actual</span>\n                                    <span className=\"value\">{Math.round(temp?.actual-273.15)}</span>\n                                </div>\n                                <div className=\"line\">\n                                    <span className=\"label\">Feels Like</span>\n                                    <span className=\"value\">{Math.round(temp?.feelsLike-273.15)}</span>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"card wind-card\">\n                            <label className=\"header\">Wind</label>\n                            <div className=\"line\">\n                                <span className=\"label\">Speed</span>\n                                <span className=\"value\">{wind?.speed}</span>\n                            </div>\n                            <div className=\"line\">\n                                <span className=\"label\">Deg</span>\n                                <span className=\"value\">{wind?.deg}</span>\n                            </div>\n                        </div>\n                        <div className=\"card cord-card\">\n                            {maps}\n                        </div>\n                    </div>\n                </React.Fragment>\n            )\n        } else {\n            return <div>Loading...</div>\n        }\n    }\n}\n\nexport default WeatherPage;","import styled from 'styled-components';\nimport React from 'react'\nimport CountryList from './component/CountryList'\nimport CountryPage from './component/CountryPage'\nimport WeatherPage from './component/WeatherPage';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nconst StyledParent = styled.div`\n  width:100%;\n  ul{\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n  li{\n  \n  }\n  a{\n    padding: 10px;\n    display: block;\n    line-height: 40px;\n    background: #FFF;\n    border-bottom: 1px solid #999;\n    cursor: pointer;\n    text-decoration: none;\n    color: #222;\n  }\n  .header{\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n    background: #FFF;\n  }\n  .country{\n    padding: 10px;\n    font-size: 18px;\n    text-align: center;\n    min-height: 40px;\n    line-height: 40px;\n    background: #EB4D4D;\n    color: #FFF;\n  }\n  .country-capital {\n    text-align:center;\n    padding-bottom: 10px;\n    background: #EB4D4D;\n    color: #FFF;\n  }\n  .back-btn{\n    cursor: pointer;\n    position: absolute;\n    top:20px;\n    left: 40px;\n    line-height: 35px;\n    padding: 0 10px;\n    border: 1px solid #fff;\n    color: #FFF;\n  }\n  .card{\n    width: 80%;\n    margin: 30px auto;\n    background: #fff;\n    box-shadow: 0 0 20px rgba(0,0,0,0.3);\n    padding: 20px;\n    border-radius: 5px;\n  }\n  .cord-card{\n    height: 400px;\n  }\n  .line {\n      display: flex;\n      justify-content: space-between;\n      padding: 10px 0;\n      border-bottom: 1px solid #ccc;\n  }\n  .temp-card{\n    display: flex;\n    justify-content: space-between;\n  }\n  .line:last-child {\n    border-bottom: 0;\n  }\n  .actual-temp {\n      flex: 1;\n  }\n  .actual-temp > label {\n    font-size: 16px;\n    text-transform: capitalize;\n  }\n  .line-wrapper {\n      flex: 1;\n  }\n  .actual-temp .value{\n    height: 120px;\n    display: flex;\n  }\n  .actual-temp .value img{\n    height: 60px;\n    padding: 30px 0;\n  }\n  .actual-temp .value span {\n    font-size: 50px;\n    line-height: 120px;\n    display: flex;\n  }\n  .actual-temp .value span span{\n    color: #888;\n    font-size: 30px;\n    line-height: 130px\n  }\n  .card > .header {\n    font-size: 18px;\n    margin: 10px 0;\n  }\n  .back-btn-mobile{\n    display: none;\n    text-align: center;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    margin-top: -4px;\n    color: #FFF;\n  }\n\n  @media (max-width: 500px) {\n    .back-btn{\n      display: none;\n    }\n    .back-btn-mobile{\n      display: flex;\n    }\n    .country{\n      display: flex;\n      justify-content: center;\n    }\n  }\n\n`;\n\nfunction App() {\n  \n  \n  return (\n    <StyledParent>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/weather\">\n            <WeatherPage />\n          </Route>\n          <Route path=\"/country\">\n            <CountryPage />\n          </Route>\n          <Route path=\"/\">\n            <CountryList />\n          </Route>\n        </Switch>\n      </Router>\n      {/* {\n        firstScreen ? <CountryList clikLineItem={clikLineItem}/> : \n          (weatherPage ? <WeatherPage name={state} goBackWeather={goBackWeather}/> : <CountryPage code={code} goBack={goBack} clickState={clickState} />)\n      } */}\n    </StyledParent>\n    \n  );\n\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}